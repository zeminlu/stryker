#
# TACO: Translation of Annotated COde
# Copyright (c) 2010 Universidad de Buenos Aires
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA,
# 02110-1301, USA

#DynJAlloyConfig.Class=ar.edu.dynjalloy.DynJAlloyConfigImpl
DynJAlloyConfig.Class=ar.edu.taco.TacoConfigurator

# No pude encontrar ninguna configuracion que use este parametro.
# Usado en: 
# 			DynalloyFactory.
useCustomRelationalOverride = false


# 
# Usado en: 
# 			DynJAlloyContext.
#			Se usa para que JDynAlloy utilize el invariante de las clases en la pre y pos condicion de los metodos que 
#			cambian su estado en el transcurso del metodo analizado
#relevantClasses=



# 
# Usado en: 
# 			PostconditionFormulaMutator: Se utiliza en una funcion que nosotros nunca llamamos (getExpr(AlloyVariable v))
dynamicJavaLangFields = false

#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(JAssert n), visit(JProgramDeclaration node)
assertIsAssume = false

#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(JCreateObject n), visit(DynJAlloyModule node), 
useClassSingletons = false

#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(DynJAlloyModule node),  
classExtendsObject = false

#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(DynJAlloyModule node),  
typeSafety = false

#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(JProgramDeclaration node),  
#classToCheck = 
#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(JProgramDeclaration node),
# se usa tambien como se usaba "dynalloy.toAlloy.assertionToCheck"  
#methodToCheck =

#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(JProgramDeclaration node) 
#			DynJAlloyXlatorVisitor: en metodos: visit(JProgramDeclaration node) 
#			Se utiliza para habilitar el procesamiento verificar "nullPointersExceptions"
checkNullDereference = true

#
# Usado en:
#			JmlExpressionXlator
quantifierIncludesNull=true

# Usado en:
# 			PreludeModule: en metodos: static intialization
#			JavaToDynalloyManager: en metodos: 
#builtInModules=JBoolean
#builtInModules=Class
#builtInModules=JException
#builtInModules=JThrowable
#builtInModules=JInteger
#builtInModules=JList
#builtInModules=JMap
#builtInModules=JNullPointerException
#builtInModules=JIndexOutOfBoundsException
#builtInModules=JRuntimeException
#builtInModules=JSet
#builtInModules=JSystemArray
#builtInModules=JJMLObjectSequence
#builtInModules=JJMLObjectSet
#builtInModules=


# Usado en: 
# 		   DynAlloyToAlloyManager: Parametros del traductor Dynalloy. Todos estos son opcionales. Utilizadas para la conversion de Dynalloy a Dynjalloy
#
dynalloy.toAlloy.enable=true
dynalloy.toAlloy.loopUnroll=3

#dynalloy.toAlloy.strictUnrolling=false
dynalloy.toAlloy.removeQuantifiers=true
#dynalloy.toAlloy.applySimplifications=true

# Usado en: 
# 		   ar.edu.dynjalloy.xlator.PostconditionExprMutator.getExpr(AlloyVariable): Utilizadas para la conversion de JDynalloy a Dynalloy
#
dynamicJavaLangFields=false

######## JML PARSER

# Usado en: 
# DynJML4AlloyJML2Main.main
# boolean. Usado para desactivar el parseo de Java (habilitado por default)
jmlParser.enabled=true

# Usado en: 
# 		   JmlParser: Directorio root de los binarios (.class)
#
jmlParser.appClassPath=bin

# Usado en: 
# 		   JmlParser: Directorio root de los fuentes (.class, .jml, etc...)
#

jmlParser.sourcePathStr=tests

skolemizeInstanceInvariant=true
skolemizeInstanceAbstraction=true

# Usado en:
#	JmlExpressionVisitor.visitJmlReachExpression
#	JJMLObjectSet.buildSetSize
#	JJMLObjectSet.buildSetHas
# Usa el Set de alloy para representar Object Set (true), o utiliza una clase built-in de JDynAlloy (false)
# 
JMLObjectSetToAlloySet=true


# Usado en:
# 	JJMLObjectSequence.buildListSize()
# 	JJMLObjectSequence.buildListIsEmpty()
# Usa el Seq de alloy para representar Object Sequence (true), o utiliza una clase built-in de JDynAlloy (false)
# 
JMLObjectSequenceToAlloySequence=true

# Usado en:
# DynJML4AlloyJML2Main.main
# boolean. Habilita el parser JDynAlloy (deshabilitado por default)
jdynalloy.parser.enabled=true

# Usado en:
# JDynAlloyParser.execute
# List<String>. Lista de archivos de fuentes del parser JDynAlloy 

#jdynalloy.parser.inputFiles=jdynsrc/LinkList.djals

# Usado en:
# JDynAlloyParser.execute
# List<String>. Lista de resources de fuentes del parser JDynAlloy 
#jdynalloy.parser.inputResources=

newExceptionsAreLiterals=true

# Usado en:
# ar.edu.dynjalloy.xlator.DynJAlloyXlatorVisitor.visit(DynJAlloyModule) 
# String.
#  
# Additionals parameter for assertion checking or program running 
assertionArguments= for 8

# Usado en:
# ar.edu.dynjml4alloy.configurator.DynJML4AlloyConfigurator
# int
#  
# Complementa el parametro "assertionArguments".
# Si el parametro esta presente se le agrega "but ${bandwidth} int" al final del parametro assertionArguments
# Ademas se utiliza para manejar  valores de enteros grandes  
int.bitwidth=4


##################################STRYKER##########################
# For paths replace the path separator with a {0}, this will be
# replaced with the correct path separator when loading the
# configuration file
#
path.output={0}tmp{0}
path.mujavaOutput=${path.output}{0}mutants{0}
path.compilingSandbox=${path.output}compilingSandbox-{1}{0}
path.junitPath={0}home{0}stein{0}IDEs{0}eclipse{0}plugins{0}org.junit_4.11.0.v201303080030{0}junit.jar
path.hamcrestPath={0}home{0}stein{0}IDEs{0}eclipse{0}plugins{0}org.hamcrest.core_1.3.0.v201303031735.jar
tests.output=${path.compilingSandbox}
tests.package=stryker.tests
tests.template=testClassTemplate.java
attemptToCorrectBug=false
useJavaSBP=false
maxStrykerMethodsPerFile=1
generateUnitTestCase=false
useTightUpperBounds=false
objectScope=3
inferScope=true
checkArithmeticException=false